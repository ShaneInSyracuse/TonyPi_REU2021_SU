# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from TonyPi/Debug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Debug(genpy.Message):
  _md5sum = "1f9d5ddd258f9002ec426a81913f3ad7"
  _type = "TonyPi/Debug"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
float32[10] offset
float32[10] states
float32[10] pos
int64[10] target1
int64[10] target2
int64[10] target3
int64[10] target4
int64[10] target5
int64[10] target6
int64[10] target7
int64[10] target8
int64[10] target9
int64[10] target10
string IsInPosition
int64 currentLine

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','offset','states','pos','target1','target2','target3','target4','target5','target6','target7','target8','target9','target10','IsInPosition','currentLine']
  _slot_types = ['std_msgs/Header','float32[10]','float32[10]','float32[10]','int64[10]','int64[10]','int64[10]','int64[10]','int64[10]','int64[10]','int64[10]','int64[10]','int64[10]','int64[10]','string','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,offset,states,pos,target1,target2,target3,target4,target5,target6,target7,target8,target9,target10,IsInPosition,currentLine

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Debug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.offset is None:
        self.offset = [0.] * 10
      if self.states is None:
        self.states = [0.] * 10
      if self.pos is None:
        self.pos = [0.] * 10
      if self.target1 is None:
        self.target1 = [0] * 10
      if self.target2 is None:
        self.target2 = [0] * 10
      if self.target3 is None:
        self.target3 = [0] * 10
      if self.target4 is None:
        self.target4 = [0] * 10
      if self.target5 is None:
        self.target5 = [0] * 10
      if self.target6 is None:
        self.target6 = [0] * 10
      if self.target7 is None:
        self.target7 = [0] * 10
      if self.target8 is None:
        self.target8 = [0] * 10
      if self.target9 is None:
        self.target9 = [0] * 10
      if self.target10 is None:
        self.target10 = [0] * 10
      if self.IsInPosition is None:
        self.IsInPosition = ''
      if self.currentLine is None:
        self.currentLine = 0
    else:
      self.header = std_msgs.msg.Header()
      self.offset = [0.] * 10
      self.states = [0.] * 10
      self.pos = [0.] * 10
      self.target1 = [0] * 10
      self.target2 = [0] * 10
      self.target3 = [0] * 10
      self.target4 = [0] * 10
      self.target5 = [0] * 10
      self.target6 = [0] * 10
      self.target7 = [0] * 10
      self.target8 = [0] * 10
      self.target9 = [0] * 10
      self.target10 = [0] * 10
      self.IsInPosition = ''
      self.currentLine = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_10f().pack(*self.offset))
      buff.write(_get_struct_10f().pack(*self.states))
      buff.write(_get_struct_10f().pack(*self.pos))
      buff.write(_get_struct_10q().pack(*self.target1))
      buff.write(_get_struct_10q().pack(*self.target2))
      buff.write(_get_struct_10q().pack(*self.target3))
      buff.write(_get_struct_10q().pack(*self.target4))
      buff.write(_get_struct_10q().pack(*self.target5))
      buff.write(_get_struct_10q().pack(*self.target6))
      buff.write(_get_struct_10q().pack(*self.target7))
      buff.write(_get_struct_10q().pack(*self.target8))
      buff.write(_get_struct_10q().pack(*self.target9))
      buff.write(_get_struct_10q().pack(*self.target10))
      _x = self.IsInPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.currentLine
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 40
      self.offset = _get_struct_10f().unpack(str[start:end])
      start = end
      end += 40
      self.states = _get_struct_10f().unpack(str[start:end])
      start = end
      end += 40
      self.pos = _get_struct_10f().unpack(str[start:end])
      start = end
      end += 80
      self.target1 = _get_struct_10q().unpack(str[start:end])
      start = end
      end += 80
      self.target2 = _get_struct_10q().unpack(str[start:end])
      start = end
      end += 80
      self.target3 = _get_struct_10q().unpack(str[start:end])
      start = end
      end += 80
      self.target4 = _get_struct_10q().unpack(str[start:end])
      start = end
      end += 80
      self.target5 = _get_struct_10q().unpack(str[start:end])
      start = end
      end += 80
      self.target6 = _get_struct_10q().unpack(str[start:end])
      start = end
      end += 80
      self.target7 = _get_struct_10q().unpack(str[start:end])
      start = end
      end += 80
      self.target8 = _get_struct_10q().unpack(str[start:end])
      start = end
      end += 80
      self.target9 = _get_struct_10q().unpack(str[start:end])
      start = end
      end += 80
      self.target10 = _get_struct_10q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IsInPosition = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IsInPosition = str[start:end]
      start = end
      end += 8
      (self.currentLine,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.offset.tostring())
      buff.write(self.states.tostring())
      buff.write(self.pos.tostring())
      buff.write(self.target1.tostring())
      buff.write(self.target2.tostring())
      buff.write(self.target3.tostring())
      buff.write(self.target4.tostring())
      buff.write(self.target5.tostring())
      buff.write(self.target6.tostring())
      buff.write(self.target7.tostring())
      buff.write(self.target8.tostring())
      buff.write(self.target9.tostring())
      buff.write(self.target10.tostring())
      _x = self.IsInPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.currentLine
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 40
      self.offset = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
      start = end
      end += 40
      self.states = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
      start = end
      end += 40
      self.pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
      start = end
      end += 80
      self.target1 = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      start = end
      end += 80
      self.target2 = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      start = end
      end += 80
      self.target3 = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      start = end
      end += 80
      self.target4 = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      start = end
      end += 80
      self.target5 = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      start = end
      end += 80
      self.target6 = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      start = end
      end += 80
      self.target7 = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      start = end
      end += 80
      self.target8 = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      start = end
      end += 80
      self.target9 = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      start = end
      end += 80
      self.target10 = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=10)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IsInPosition = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IsInPosition = str[start:end]
      start = end
      end += 8
      (self.currentLine,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10f = None
def _get_struct_10f():
    global _struct_10f
    if _struct_10f is None:
        _struct_10f = struct.Struct("<10f")
    return _struct_10f
_struct_10q = None
def _get_struct_10q():
    global _struct_10q
    if _struct_10q is None:
        _struct_10q = struct.Struct("<10q")
    return _struct_10q
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
