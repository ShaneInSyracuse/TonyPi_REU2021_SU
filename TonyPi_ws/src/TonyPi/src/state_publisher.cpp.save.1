#include <string>
#include <ros/ros.h>
#include <sensor_msgs/JointState.h>
#include <tf/transform_broadcaster.h>
#include <TonyPi/Debug.h>
#include <fstream>
#include <iostream>
#include <cstring>

void ReadGaitCSV(){
    double target_vals[10][10];
    std::ifstream gaitFile;
    gaitFile.open("gait.csv");
    std::string line, val;                  /* string for line & value */
    std::vector<std::vector<int>> array;    /* vector of vector<int>  */

    while (std::getline (f, line)) {        /* read each line */
        std::vector<int> v;                 /* row vector v */
        std::stringstream s (line);         /* stringstream line */
        while (getline (s, val, ','))       /* get each value (',' delimited) */
            v.push_back (std::stoi (val));  /* add to row vector */
        array.push_back (v);                /* add row vector to array */
    }

    for (auto& row : array) {               /* iterate over rows */
        for (auto& val : row)               /* iterate over vals */
            std::cout << val << "  ";       /* output value      */
        std::cout << "\n";                  /* tidy up with '\n' */
    }
    gaitFile.close();
}

int main(int argc, char** argv) {
    ros::init(argc, argv, "state_publisher");
    ros::NodeHandle n;
    ros::Publisher joint_pub = n.advertise<sensor_msgs::JointState>("joint_states", 1);
    ros::Publisher debugPub = n.advertise<TonyPi::Debug>("debug", 1);
    tf::TransformBroadcaster broadcaster;
    ros::Rate loop_rate(30);

    const double degree = M_PI/180;

    // robot state
    double states[10] = {500.0,500.0,400.0,600.0,500.0,500.0,390.0,610.0,500.0,500.0};
    double offset[10] = {-500,-500,-400,-600,-500,-500,-390,-610,-500,-500};
    double increment = 1;
    double pulseToDegree = (120*degree)/1000;
    int currentLine = 1;

    double target_vals[10][10] = ReadGaitCSV();

    // message declarations
    geometry_msgs::TransformStamped odom_trans;
    sensor_msgs::JointState joint_state;
    TonyPi::Debug debug;
    debug.IsInPosition = "false";
    odom_trans.header.frame_id = "map";
    odom_trans.child_frame_id = "base_link";
    bool atLocation = false;
    bool foundState[10] = {false,false,false,false,false,false,false,false,false,false};

    while (ros::ok()) {
        //update joint_state
        joint_state.header.stamp = ros::Time::now();
        joint_state.name.resize(10);
        joint_state.position.resize(10);
        joint_state.name[0] ="LHip-Sideways";
        joint_state.name[1] ="RHip-Sideways";
        joint_state.name[2] ="LHip";
        joint_state.name[3] ="RHip";
        joint_state.name[4] ="LKnee";
        joint_state.name[5] ="RKnee";
        joint_state.name[6] ="LAnkle";
        joint_state.name[7] ="RAnkle";
        joint_state.name[8] ="LAnkle-Sideways";
        joint_state.name[9] ="RAnkle-Sideways";
        for (int i = 0; i < 10; i++){
             joint_state.position[i] = (offset[i] + states[i])*pulseToDegree;
             debug.offset[i] = offset[i];
             debug.states[i] = states[i];
             debug.pos[i] = joint_state.position[i];
        }
        // update transform
        odom_trans.header.stamp = ros::Time::now();
        odom_trans.transform.translation.x = 0.0;
        odom_trans.transform.translation.y = 0.0;
        odom_trans.transform.translation.z = 0.3;
        odom_trans.transform.rotation.x = 0;
        odom_trans.transform.rotation.y = 0;
        odom_trans.transform.rotation.z = 0;
        odom_trans.transform.rotation.w = 1.0;
        //send the joint state and transform
        joint_pub.publish(joint_state);
        debugPub.publish(debug);
        broadcaster.sendTransform(odom_trans);
        // Create new robot state
        atLocation = true;
        for (int i = 0; i < 10; i++){
             if(states[i] < target_vals[i][currentLine] - increment){
                 states[i] = states[i] + increment;
             }else if(states[i] > target_vals[i][currentLine] + increment){
                 states[i] = states[i] - increment;
             }else{
                 foundState[i] = true;
             }
             atLocation = atLocation && foundState[i];
        }
        debug.IsInPosition = "false";
        if (atLocation){
             debug.IsInPosition = "true";
             if(currentLine != 10){
                 currentLine = currentLine + 1;
             }else{
                 currentLine = 1;
             }
             for (int i = 0; i < 10; i++){
                 foundState[i] = false;
             }
        }
        debug.currentLine = currentLine;
        // This will adjust as needed per iteration
        loop_rate.sleep();
    }
    return 0;
}
