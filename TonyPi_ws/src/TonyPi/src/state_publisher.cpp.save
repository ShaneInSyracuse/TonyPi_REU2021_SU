#include <string>
#include <ros/ros.h>
#include <sensor_msgs/JointState.h>
#include <tf/transform_broadcaster.h>
#include <fstream>
#include <iostream>
#include <cstring>

double target_vals[10];

void ReadGaitCSV(int line){
    std::ifstream gaitFile;
    gaitFile.open("gait.csv");
    std::string tempString;
    char temp[100];
    for(int j = 1; j < line; j++){
        std::getline(gaitFile, tempString);
    }
    for(int i = 0; i < 10; i++){
        std::getline(gaitFile, tempString, ',');
        strcpy(temp, tempString.c_str());
        target_vals[i] = std::strtod(temp, NULL);
        std::cout << target_vals[i];
    }
    gaitFile.close();
}

int main(int argc, char** argv) {
    ros::init(argc, argv, "state_publisher");
    ros::NodeHandle n;
    ros::Publisher joint_pub = n.advertise<sensor_msgs::JointState>("joint_states", 1);
    tf::TransformBroadcaster broadcaster;
    ros::Rate loop_rate(30);

    const double degree = M_PI/180;

    // robot state
    double states[10] = {500,500,400,600,500,500,390,610,500,500};
    double offset[10] = {-500,-500,-400,-600,-500,-500,-390,-610,-500,-500};
    double increment = degree;
    double pulseToDegree = (120*degree)/1000;
    double currentLine = 1;

    // message declarations
    geometry_msgs::TransformStamped odom_trans;
    sensor_msgs::JointState joint_state;
    odom_trans.header.frame_id = "map";
    odom_trans.child_frame_id = "base_link";
    bool atLocation = false;
    bool foundState[10] = {false,false,false,false,false,};

    while (ros::ok()) {
        //update joint_state
        joint_state.header.stamp = ros::Time::now();
        joint_state.name.resize(10);
        joint_state.position.resize(10);
        joint_state.name[0] ="LHip-Sideways";
        joint_state.name[1] ="RHip-Sideways";
        joint_state.name[2] ="LHip";
        joint_state.name[3] ="RHip";
        joint_state.name[4] ="LKnee";
        joint_state.name[5] ="RKnee";
        joint_state.name[6] ="LAnkle";
        joint_state.name[7] ="RAnkle";
        joint_state.name[8] ="LAnkle-Sideways";
        joint_state.name[9] ="RAnkle-Sideways";

        for (int i = 0; i < 10; i++){
             joint_state.position[i] = (offset[i] + states[i]) / pulseToDegree;
        }
        // update transform
        // (moving in a circle with radius=2)
        odom_trans.header.stamp = ros::Time::now();
        odom_trans.transform.translation.x = 0.1;
        odom_trans.transform.translation.y = 0.1;
        odom_trans.transform.translation.z = 0.7;
        odom_trans.transform.rotation.x = 0;
        odom_trans.transform.rotation.y = 0;
        odom_trans.transform.rotation.z = 0;
        odom_trans.transform.rotation.w = 1.0;

        //send the joint state and transform
        joint_pub.publish(joint_state);
        broadcaster.sendTransform(odom_trans);

        // Create new robot state
        ReadGaitCSV(currentLine);
        atLocation = TRUE;
        for (int i = 0; i < 10; i++){
             if(states[i] < target_vals[i] - increment/pulseToDegree){
                 states[i] += increment/pulseToDegree;
             }else if(states[i] > target_vals[i] + increment/pulseToDegree){
                 states[i] -= increment/pulseToDegree;
             }else{
                 states[i] = target_vals[i];
                 foundState[i] = TRUE;
             }
             atLocation = atLocation && foundState[i];
        }
        if (atLocation){
             if(currentLine != 10){
                 currentLine++;
             }else{
                 currentLine = 1;
             }
             for (int i = 0; i < 10; i++){
                 foundState[i] = FALSE;
             }
        }

        // This will adjust as needed per iteration
        loop_rate.sleep();
    }


    return 0;
}
